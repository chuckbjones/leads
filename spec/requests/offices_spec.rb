require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/offices", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Office. As you add validations to Office, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:office)
  }

  let(:invalid_attributes) {
    attributes_for(:office, state: "XX")
  }

  describe "GET /show" do
    it "renders a successful response" do
      sign_in_as_a_valid_user
      office = Office.create! valid_attributes
      get office_url(office)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      sign_in_as_a_valid_user
      office = Office.create! valid_attributes
      get edit_office_url(office)
      expect(response).to be_successful
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {name: "New Name"}
      }

      it "updates the requested office" do
        sign_in_as_a_valid_user
        office = Office.create! valid_attributes
        patch office_url(office), params: {office: new_attributes}
        office.reload
        expect(office.name).to eq("New Name")
      end

      it "redirects to the office" do
        sign_in_as_a_valid_user
        office = Office.create! valid_attributes
        patch office_url(office), params: {office: new_attributes}
        office.reload
        expect(response).to redirect_to(office_url(office))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        sign_in_as_a_valid_user
        office = Office.create! valid_attributes
        patch office_url(office), params: {office: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
